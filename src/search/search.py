import streamlit as st
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import OneHotEncoder
from src.utilities.helpers import calculate_similarity
import os

# Directory where Parquet files are saved
PARQUET_DIR = os.path.join("data", "processed")


def perform_clustering(df, n_clusters):
    """Performs K-Means clustering on the dataset."""
    if df.empty:
        return None, None

    # Feature Engineering
    enc = OneHotEncoder(handle_unknown="ignore")
    X = enc.fit_transform(df[['combined_text']]).toarray()

    # Apply K-Means
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
    df["cluster"] = kmeans.fit_predict(X)

    return df, kmeans


def app():
    st.title('Advanced Search')
    st.write("Suggests clusters to facilitate classification.")

    st.sidebar.title("Settings")

    # List all .parquet files in the data/processed directory
    if not os.path.exists(PARQUET_DIR):
        st.error(
            f"Directory '{PARQUET_DIR}' not found. Generate embeddings first.")
        return

    parquet_files = [f for f in os.listdir(
        PARQUET_DIR) if f.endswith(".parquet")]
    if not parquet_files:
        st.error(
            f"No Parquet files found in '{PARQUET_DIR}'. Generate embeddings first.")
        return

    # Let the user select a Parquet file
    selected_parquet = st.sidebar.selectbox(
        "Select a Parquet file to search",
        parquet_files,
        help="Choose a Parquet file generated by the Datasource app."
    )

    # Construct the full path to the selected Parquet file
    parquet_file = os.path.join(PARQUET_DIR, selected_parquet)

    # Load the Parquet file to get the list of labels
    if not os.path.exists(parquet_file):
        st.error(
            f"File '{parquet_file}' not found. Generate embeddings first.")
        return

    df_temp = pd.read_parquet(parquet_file)
    if 'label' not in df_temp.columns:
        df_temp['label'] = ""
    # Get unique labels from the Parquet file, excluding empty strings
    label_types = [
        ""] + sorted([label for label in df_temp['label'].unique() if label != ""])

    n_similares = st.sidebar.slider("Number of Similar Elements", 1, 30, 10)
    n_clusters = st.sidebar.slider("Number of Clusters", 2, 50, 5)
    search_words = st.sidebar.text_input("Search Words", "")
    active_state = st.sidebar.checkbox("Search in Labeled Items", value=False)
    selected_type = st.selectbox("Select a Type", label_types)
    submit_button = st.sidebar.button("Submit")

    # Initialize session state variables if they don't exist
    if 'df' not in st.session_state:
        st.session_state.df = None
    if 'cluster' not in st.session_state:
        st.session_state.cluster = 0
    if 'active_state' not in st.session_state:
        st.session_state.active_state = active_state
    if 'existing_labels' not in st.session_state:
        st.session_state.existing_labels = label_types

    # Reset df on page load to avoid using stale data
    if not submit_button:
        st.session_state.df = None

    if submit_button:
        df = pd.read_parquet(parquet_file)
        if 'label' not in df.columns:
            df['label'] = ""

        if selected_type:
            df = df[df['label'] == selected_type]
        elif search_words:
            df = df[df['combined_text'].str.contains(
                search_words, case=False, na=False)]

        if df.shape[0] > 3:
            df, _ = perform_clustering(df, n_clusters)
            df = calculate_similarity(df, n_clusters)
        else:
            df['cluster'] = 0

        st.session_state.df = df
        st.session_state.cluster = 0
        st.session_state.active_state = active_state

        # Display logic moved inside submit_button block
        df = st.session_state.df
        distinct_labels = df['label'].unique().tolist()
        distinct_labels = [x for x in distinct_labels if x != ""]
        distinct_labels.sort()

        if not st.session_state.active_state:
            df = df[df['label'] == ""]

        cluster = st.session_state.cluster

        st.header("Parameters")
        st.write(f"Displaying {n_similares} similar elements")
        st.write(f"Cluster: {cluster+1} of {n_clusters}")
        labels_count = df.shape[0]
        empty_labels_count = df['label'].eq("").sum()
        st.write(
            f"Number of elements without a label: {empty_labels_count}/{labels_count}")

        next_back_cols = st.columns([1, 1, 2])
        with next_back_cols[0]:
            if st.button("BACK"):
                st.session_state.cluster = (cluster - 1) % n_clusters
                cluster = st.session_state.cluster
        with next_back_cols[1]:
            if st.button("NEXT"):
                st.session_state.cluster = (cluster + 1) % n_clusters
                cluster = st.session_state.cluster

        if not st.session_state.active_state:
            similar_docs = df[(df['cluster'] == cluster) & (df['label'] == "")]
        else:
            similar_docs = df[df['cluster'] == cluster]
        similar_docs = similar_docs.head(n_similares)

        st.header("Selection of Cluster Labels")

        label_cols = st.columns([2, 3, 2])
        with label_cols[0]:
            selected_label = st.selectbox(
                "Select a Label", st.session_state.existing_labels)
        with label_cols[1]:
            new_label = st.text_input("Add New Label")
        with label_cols[2]:
            if st.button("Add Label"):
                if new_label and new_label not in st.session_state.existing_labels:
                    st.session_state.existing_labels.append(new_label)
                    selected_label = new_label
                    st.success(f"Label '{new_label}' added successfully.")

        st.header("Similar Elements in the Cluster")

        selected_similars = []
        for idx, row in similar_docs.iterrows():
            label_display = f" (Label: {row['label']})" if row['label'] else ""
            display_text = f"{row['combined_text'][0:2500]}{label_display}"
            if st.checkbox(display_text, key=idx, value=True):
                selected_similars.append(idx)

        if st.button("LABEL"):
            df_original = st.session_state.df
            for idx in selected_similars:
                df_original.at[idx, 'label'] = selected_label
            st.session_state.df = df_original
            try:
                df_original.to_parquet(parquet_file, index=False)
                st.success("Elements labeled successfully and file updated!")
            except Exception as e:
                st.error(f"Error saving file: {e}")


if __name__ == "__main__":
    app()
